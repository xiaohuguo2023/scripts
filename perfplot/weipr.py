import pandas as pd
import matplotlib.pyplot as plt

columns = ["trans", "M", "N", "K", "TFLOPS", "us"]
# Update the data to include all rows for a comprehensive comparison
data1_full = [
    ["TN", 4864, 4096, 4096, 584.93, 279.02],
    ["TN", 4864, 4096, 4160, 601.13, 275.74],
    ["TN", 4864, 4096, 4224, 594.22, 283.24],
    ["TN", 4864, 4096, 4288, 595.81, 286.77],
    ["TN", 4864, 4096, 4097, 557.08, 293.04],
    ["TN", 4864, 4096, 4098, 569.48, 286.73],
    ["TN", 4864, 4096, 4100, 562.51, 290.43],
    ["TN", 4864, 4096, 4104, 576.34, 283.73],
    ["TN", 4864, 4096, 4112, 575.43, 284.74],
    ["TN", 4864, 8192, 4096, 587.32, 555.77],
    ["TN", 4864, 8192, 4160, 594.83, 557.33],
    ["TN", 4864, 8192, 8192, 602.45, 1083.6],
    ["TN", 4864, 8192, 8256, 609.07, 1080.2],
    ["TN", 1024, 1024, 1024, 201.98, 10.63],
    ["TT", 1024, 1024, 1024, 145.11, 14.80],
    ["TN", 8192, 8192, 8192, 547.65, 2007.7],
    ["TT", 8192, 8192, 8192, 376.20, 2922.7],
    ["TN", 4864, 4096, 8256, 612.97, 536.68],
    ["TT", 4864, 4096, 8256, 451.12, 729.23],
    ["TN", 1024, 8192, 28672, 434.00, 1108.4],
    ["TT", 1024, 8192, 28672, 318.58, 1509.9],
    ["TN", 1024, 28672, 8192, 479.55, 1003.1],
    ["TT", 1024, 28672, 8192, 360.16, 1335.6],
    ["TN", 1024, 14336, 4096, 494.28, 243.30],
    ["TT", 1024, 14336, 4096, 351.15, 342.47],
    ["TN", 1, 8192, 28672, 3.30, 142.38],
    ["TT", 1, 8192, 28672, 1.66, 282.62],
    ["TN", 1, 14336, 4096, 4.20, 27.95],
    ["TT", 1, 14336, 4096, 2.96, 39.66],
    ["TN", 1024, 16384, 53248, 519.84, 3437.0],
    ["TT", 1024, 16384, 53248, 366.42, 4876.1],
    ["TN", 1024, 53248, 16384, 535.60, 3335.9],
    ["TT", 1024, 53248, 16384, 374.01, 4777.2],
    ["TN", 32, 16384, 53248, 109.21, 511.28],
    ["TT", 32, 16384, 53248, 78.91, 707.59],
    ["TN", 32, 53248, 16384, 109.74, 508.79],
    ["TT", 32, 53248, 16384, 84.93, 657.46],
    ["TN", 2, 3584, 4096, 4.96, 11.84],
    ["TT", 2, 3584, 4096, 2.06, 28.47],
    ["TN", 2, 4096, 1792, 4.16, 7.05],
    ["TT", 2, 4096, 1792, 2.07, 14.18],
    ["TN", 4096, 13312, 8896, 565.51, 1715.5],
    ["TT", 4096, 13312, 8896, 372.44, 2604.8],
    ["TN", 2048, 17792, 13312, 537.96, 1803.3],
    ["TT", 2048, 17792, 13312, 358.68, 2704.7],
    ["TN", 1024, 13312, 1664, 446.30, 101.65],
    ["TT", 1024, 13312, 1664, 319.41, 142.03],
    ["TN", 8192, 1536, 5120, 457.50, 281.64],
    ["TT", 8192, 1536, 5120, 321.24, 401.10],
    ["TN", 8192, 5120, 1024, 388.02, 221.38],
    ["TT", 8192, 5120, 1024, 300.74, 285.62],
    ["TN", 8192, 1024, 5120, 444.67, 193.18],
    ["TT", 8192, 1024, 5120, 337.83, 254.27],
    ["TN", 32768, 5120, 512, 424.65, 404.56],
    ["TT", 32768, 5120, 512, 300.46, 571.78],
    ["TN", 512, 1536, 5120, 221.14, 36.42],
    ["TT", 512, 1536, 5120, 140.23, 57.43],
    ["TN", 512, 5120, 1024, 217.11, 24.73],
    ["TT", 512, 5120, 1024, 153.39, 35.00],
    ["TN", 512, 1024, 5120, 181.07, 29.65],
    ["TT", 512, 1024, 5120, 116.36, 46.14],
    ["TN", 2048, 5120, 512, 261.27, 41.10],
    ["TT", 2048, 5120, 512, 186.93, 57.44],
    ["TN", 20196, 512, 1536, 268.43, 118.34],
    ["TT", 20196, 512, 1536, 234.73, 135.33],
    ["TN", 171792, 512, 1536, 456.88, 591.42],
    ["TT", 171792, 512, 1536, 331.63, 814.78],
    ["TN", 173318, 512, 1536, 454.20, 600.19],
    ["TT", 173318, 512, 1536, 332.54, 819.77],
]

data2_full = [
    ['TN', 4864, 4096, 4096, 589.45, 276.88],
    ['TN', 4864, 4096, 4160, 593.38, 279.35],
    ['TN', 4864, 4096, 4224, 593.82, 283.44],
    ['TN', 4864, 4096, 4288, 596.54, 286.42],
    ['TN', 4864, 4096, 4097, 553.43, 294.97],
    ['TN', 4864, 4096, 4098, 571.66, 285.64],
    ['TN', 4864, 4096, 4100, 563.53, 289.9],
    ['TN', 4864, 4096, 4104, 572.37, 285.7],
    ['TN', 4864, 4096, 4112, 572.3, 286.29],
    ['TN', 4864, 8192, 4096, 588.05, 555.09],
    ['TN', 4864, 8192, 4160, 595.75, 556.47],
    ['TN', 4864, 8192, 8192, 603.45, 1081.8],
    ['TN', 4864, 8192, 8256, 609.99, 1078.6],
    ['TN', 1024, 1024, 1024, 189.93, 11.31],
    ['TT', 1024, 1024, 1024, 135.85, 15.81],
    ['TN', 8192, 8192, 8192, 545.03, 2017.3],
    ['TT', 8192, 8192, 8192, 370.94, 2964.1],
    ['TN', 4864, 4096, 8256, 610.0, 539.29],
    ['TT', 4864, 4096, 8256, 450.12, 730.85],
    ['TN', 1024, 8192, 28672, 434.64, 1106.7],
    ['TT', 1024, 8192, 28672, 319.22, 1506.9],
    ['TN', 1024, 28672, 8192, 480.0, 1002.2],
    ['TT', 1024, 28672, 8192, 352.8, 1363.5],
    ['TN', 1024, 14336, 4096, 497.89, 241.54],
    ['TT', 1024, 14336, 4096, 345.99, 347.57],
    ['TN', 1, 8192, 28672, 3.5, 134.29],
    ['TT', 1, 8192, 28672, 1.7, 276.77],
    ['TN', 1, 14336, 4096, 4.07, 28.86],
    ['TT', 1, 14336, 4096, 2.94, 39.96],
    ['TN', 1024, 16384, 53248, 521.05, 3429.0],
    ['TT', 1024, 16384, 53248, 363.56, 4914.5],
    ['TN', 1024, 53248, 16384, 534.43, 3343.2],
    ['TT', 1024, 53248, 16384, 366.7, 4872.4],
    ['TN', 32, 16384, 53248, 106.81, 522.77],
    ['TT', 32, 16384, 53248, 72.59, 769.15],
    ['TN', 32, 53248, 16384, 111.02, 502.93],
    ['TT', 32, 53248, 16384, 81.09, 688.56],
    ['TN', 2, 3584, 4096, 4.97, 11.81],
    ['TT', 2, 3584, 4096, 2.05, 28.58],
    ['TN', 2, 4096, 1792, 4.14, 7.09],
    ['TT', 2, 4096, 1792, 2.08, 14.1],
    ['TN', 4096, 13312, 8896, 565.84, 1714.5],
    ['TT', 4096, 13312, 8896, 381.94, 2540.0],
    ['TN', 2048, 17792, 13312, 538.47, 1801.6],
    ['TT', 2048, 17792, 13312, 354.63, 2735.6],
    ['TN', 1024, 13312, 1664, 440.23, 103.05],
    ['TT', 1024, 13312, 1664, 326.64, 138.89],
    ['TN', 8192, 1536, 5120, 458.98, 280.73],
    ['TT', 8192, 1536, 5120, 313.26, 411.32],
    ['TN', 8192, 5120, 1024, 382.15, 224.78],
    ['TT', 8192, 5120, 1024, 293.98, 292.19],
    ['TN', 8192, 1024, 5120, 443.51, 193.68],
    ['TT', 8192, 1024, 5120, 318.3, 269.87],
    ['TN', 32768, 5120, 512, 423.5, 405.66],
    ['TT', 32768, 5120, 512, 292.01, 588.34],
    ['TN', 512, 1536, 5120, 226.74, 35.52],
    ['TT', 512, 1536, 5120, 132.98, 60.56],
    ['TN', 512, 5120, 1024, 217.56, 24.68],
    ['TT', 512, 5120, 1024, 157.95, 33.99],
    ['TN', 512, 1024, 5120, 176.53, 30.41],
    ['TT', 512, 1024, 5120, 116.45, 46.1],
    ['TN', 2048, 5120, 512, 259.35, 41.4],
    ['TT', 2048, 5120, 512, 153.75, 69.84],
    ['TN', 20196, 512, 1536, 268.14, 118.47],
    ['TT', 20196, 512, 1536, 228.88, 138.79],
    ['TN', 171792, 512, 1536, 463.0, 583.6],
    ['TT', 171792, 512, 1536, 324.26, 833.29],
    ['TN', 173318, 512, 1536, 461.09, 591.22],
    ['TT', 173318, 512, 1536, 327.48, 832.43],
]

# Creating DataFrames
df1_full = pd.DataFrame(data1_full, columns=columns)
df2_full = pd.DataFrame(data2_full, columns=columns)

# Merging and calculating performance improvement
merged_full = pd.merge(df1_full, df2_full, on=["trans", "M", "N", "K"], suffixes=('_1', '_2'))
merged_full["Perf_Improvement_%"] = ((merged_full["TFLOPS_2"] - merged_full["TFLOPS_1"]) / merged_full["TFLOPS_1"]) * 100

# Plotting the full bar chart
plt.figure(figsize=(20, 10))
plt.bar(merged_full.index, merged_full["Perf_Improvement_%"], color='skyblue', edgecolor='black')
plt.xlabel("Benchmark Index")
plt.ylabel("Performance Improvement (%)")
plt.title("Performance Improvement from Table 1 to Table 2")
plt.xticks(merged_full.index, labels=merged_full[["trans", "M", "N", "K"]].apply(lambda x: f"{x.trans}-{x.M}-{x.N}-{x.K}", axis=1), rotation=90, fontsize=8)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()

