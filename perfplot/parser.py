import re

# Input text
input_text = """
root@smc300x-clt-r4c6-18:/home/work/persistent-kernels/tune_streamk# AMDGCN_USE_BUFFER_OPS=1 python tune_streamk.py --gemm_size_file tuning_results_main@fad276d_12-14-2024-09:46:59.yaml --benchmark
Benchmarking gemm with fp16 inputs
trans     M      N      K    TFLOPS   us
TN     4864   4096   4096    589.45     276.88
TN     4864   4096   4160    593.38     279.35
TN     4864   4096   4224    593.82     283.44
TN     4864   4096   4288    596.54     286.42
TN     4864   4096   4097    553.43     294.97
TN     4864   4096   4098    571.66     285.64
TN     4864   4096   4100    563.53     289.90
TN     4864   4096   4104    572.37     285.70
TN     4864   4096   4112    572.30     286.29
TN     4864   8192   4096    588.05     555.09
TN     4864   8192   4160    595.75     556.47
TN     4864   8192   8192    603.45     1081.8
TN     4864   8192   8256    609.99     1078.6
TN     1024   1024   1024    189.93     11.31
TT     1024   1024   1024    135.85     15.81
TN     8192   8192   8192    545.03     2017.3
TT     8192   8192   8192    370.94     2964.1
TN     4864   4096   8256    610.00     539.29
TT     4864   4096   8256    450.12     730.85
TN     1024   8192  28672    434.64     1106.7
TT     1024   8192  28672    319.22     1506.9
TN     1024  28672   8192    480.00     1002.2
TT     1024  28672   8192    352.80     1363.5
TN     1024  14336   4096    497.89     241.54
TT     1024  14336   4096    345.99     347.57
TN        1   8192  28672    3.50     134.29
TT        1   8192  28672    1.70     276.77
TN        1  14336   4096    4.07     28.86
TT        1  14336   4096    2.94     39.96
TN     1024  16384  53248    521.05     3429.0
TT     1024  16384  53248    363.56     4914.5
TN     1024  53248  16384    534.43     3343.2
TT     1024  53248  16384    366.70     4872.4
TN       32  16384  53248    106.81     522.77
TT       32  16384  53248    72.59     769.15
TN       32  53248  16384    111.02     502.93
TT       32  53248  16384    81.09     688.56
TN        2   3584   4096    4.97     11.81
TT        2   3584   4096    2.05     28.58
TN        2   4096   1792    4.14     7.09
TT        2   4096   1792    2.08     14.10
TN     4096  13312   8896    565.84     1714.5
TT     4096  13312   8896    381.94     2540.0
TN     2048  17792  13312    538.47     1801.6
TT     2048  17792  13312    354.63     2735.6
TN     1024  13312   1664    440.23     103.05
TT     1024  13312   1664    326.64     138.89
TN     8192   1536   5120    458.98     280.73
TT     8192   1536   5120    313.26     411.32
TN     8192   5120   1024    382.15     224.78
TT     8192   5120   1024    293.98     292.19
TN     8192   1024   5120    443.51     193.68
TT     8192   1024   5120    318.30     269.87
TN    32768   5120    512    423.50     405.66
TT    32768   5120    512    292.01     588.34
TN      512   1536   5120    226.74     35.52
TT      512   1536   5120    132.98     60.56
TN      512   5120   1024    217.56     24.68
TT      512   5120   1024    157.95     33.99
TN      512   1024   5120    176.53     30.41
TT      512   1024   5120    116.45     46.10
TN     2048   5120    512    259.35     41.40
TT     2048   5120    512    153.75     69.84
TN    20196    512   1536    268.14     118.47
TT    20196    512   1536    228.88     138.79
TN    171792    512   1536    463.00     583.60
TT    171792    512   1536    324.26     833.29
TN    173318    512   1536    461.09     591.22
TT    173318    512   1536    327.48     832.43
"""

# Define regex pattern to extract rows
pattern = r"^(TN|TT)\s+(\d+)\s+(\d+)\s+(\d+)\s+([\d.]+)\s+([\d.]+)$"

# Find all matches in the input text
matches = re.findall(pattern, input_text, re.MULTILINE)

# Convert matches to the desired format
parsed_data = [
    [match[0], int(match[1]), int(match[2]), int(match[3]), float(match[4]), float(match[5])]
    for match in matches
]

# Output as a variable
print("data1_full = [")
for row in parsed_data:
    print(f"    {row},")
print("]")

